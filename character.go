package main

import "time"

// The schema, based on https://character-service.dndbeyond.com/character/v5/character/131438467

type CharacterResponse struct {
	ID         int           `json:"id"`
	Success    bool          `json:"success"`
	Message    string        `json:"message"`
	Data       CharacterInfo `json:"data"`
	Pagination interface{}   `json:"pagination"`
}

type CharacterInfo struct {
	ID                 int    `json:"id"`
	UserID             int    `json:"userId"`
	Username           string `json:"username"`
	IsAssignedToPlayer bool   `json:"isAssignedToPlayer"`
	ReadonlyURL        string `json:"readonlyUrl"`
	Decorations        struct {
		AvatarURL                  string      `json:"avatarUrl"`
		FrameAvatarURL             interface{} `json:"frameAvatarUrl"`
		BackdropAvatarURL          interface{} `json:"backdropAvatarUrl"`
		SmallBackdropAvatarURL     interface{} `json:"smallBackdropAvatarUrl"`
		LargeBackdropAvatarURL     interface{} `json:"largeBackdropAvatarUrl"`
		ThumbnailBackdropAvatarURL interface{} `json:"thumbnailBackdropAvatarUrl"`
		DefaultBackdrop            struct {
			BackdropAvatarURL          string `json:"backdropAvatarUrl"`
			SmallBackdropAvatarURL     string `json:"smallBackdropAvatarUrl"`
			LargeBackdropAvatarURL     string `json:"largeBackdropAvatarUrl"`
			ThumbnailBackdropAvatarURL string `json:"thumbnailBackdropAvatarUrl"`
		} `json:"defaultBackdrop"`
		AvatarID                             interface{} `json:"avatarId"`
		PortraitDecorationKey                interface{} `json:"portraitDecorationKey"`
		FrameAvatarDecorationKey             interface{} `json:"frameAvatarDecorationKey"`
		FrameAvatarID                        interface{} `json:"frameAvatarId"`
		BackdropAvatarDecorationKey          interface{} `json:"backdropAvatarDecorationKey"`
		BackdropAvatarID                     interface{} `json:"backdropAvatarId"`
		SmallBackdropAvatarDecorationKey     string      `json:"smallBackdropAvatarDecorationKey"`
		SmallBackdropAvatarID                interface{} `json:"smallBackdropAvatarId"`
		LargeBackdropAvatarDecorationKey     string      `json:"largeBackdropAvatarDecorationKey"`
		LargeBackdropAvatarID                interface{} `json:"largeBackdropAvatarId"`
		ThumbnailBackdropAvatarDecorationKey string      `json:"thumbnailBackdropAvatarDecorationKey"`
		ThumbnailBackdropAvatarID            interface{} `json:"thumbnailBackdropAvatarId"`
		ThemeColor                           interface{} `json:"themeColor"`
	} `json:"decorations"`
	Name               string      `json:"name"`
	SocialName         string      `json:"socialName"`
	Gender             string      `json:"gender"`
	Faith              string      `json:"faith"`
	Age                int         `json:"age"`
	Hair               string      `json:"hair"`
	Eyes               string      `json:"eyes"`
	Skin               string      `json:"skin"`
	Height             string      `json:"height"`
	Weight             int         `json:"weight"`
	Inspiration        bool        `json:"inspiration"`
	BaseHitPoints      int         `json:"baseHitPoints"`
	BonusHitPoints     interface{} `json:"bonusHitPoints"`
	OverrideHitPoints  interface{} `json:"overrideHitPoints"`
	RemovedHitPoints   int         `json:"removedHitPoints"`
	TemporaryHitPoints int         `json:"temporaryHitPoints"`
	CurrentXp          int         `json:"currentXp"`
	AlignmentID        int         `json:"alignmentId"`
	LifestyleID        int         `json:"lifestyleId"`
	Stats              []struct {
		ID    int         `json:"id"`
		Name  interface{} `json:"name"`
		Value int         `json:"value"`
	} `json:"stats"`
	BonusStats []struct {
		ID    int         `json:"id"`
		Name  interface{} `json:"name"`
		Value interface{} `json:"value"`
	} `json:"bonusStats"`
	OverrideStats []struct {
		ID    int         `json:"id"`
		Name  interface{} `json:"name"`
		Value interface{} `json:"value"`
	} `json:"overrideStats"`
	Background struct {
		HasCustomBackground bool `json:"hasCustomBackground"`
		Definition          struct {
			ID                                  int           `json:"id"`
			EntityTypeID                        int           `json:"entityTypeId"`
			DefinitionKey                       string        `json:"definitionKey"`
			Name                                string        `json:"name"`
			Description                         string        `json:"description"`
			Snippet                             string        `json:"snippet"`
			ShortDescription                    string        `json:"shortDescription"`
			SkillProficienciesDescription       string        `json:"skillProficienciesDescription"`
			ToolProficienciesDescription        string        `json:"toolProficienciesDescription"`
			LanguagesDescription                string        `json:"languagesDescription"`
			EquipmentDescription                string        `json:"equipmentDescription"`
			FeatureName                         string        `json:"featureName"`
			FeatureDescription                  string        `json:"featureDescription"`
			AvatarURL                           interface{}   `json:"avatarUrl"`
			LargeAvatarURL                      interface{}   `json:"largeAvatarUrl"`
			SuggestedCharacteristicsDescription string        `json:"suggestedCharacteristicsDescription"`
			SuggestedProficiencies              interface{}   `json:"suggestedProficiencies"`
			SuggestedLanguages                  interface{}   `json:"suggestedLanguages"`
			Organization                        interface{}   `json:"organization"`
			ContractsDescription                string        `json:"contractsDescription"`
			SpellsPreDescription                string        `json:"spellsPreDescription"`
			SpellsPostDescription               string        `json:"spellsPostDescription"`
			PersonalityTraits                   []interface{} `json:"personalityTraits"`
			Ideals                              []interface{} `json:"ideals"`
			Bonds                               []interface{} `json:"bonds"`
			Flaws                               []interface{} `json:"flaws"`
			IsHomebrew                          bool          `json:"isHomebrew"`
			Sources                             []struct {
				SourceID   int `json:"sourceId"`
				PageNumber int `json:"pageNumber"`
				SourceType int `json:"sourceType"`
			} `json:"sources"`
			SpellListIds []interface{} `json:"spellListIds"`
			FeatList     struct {
				ID      int    `json:"id"`
				Name    string `json:"name"`
				FeatIds []int  `json:"featIds"`
			} `json:"featList"`
			GrantedFeats []struct {
				ID      int    `json:"id"`
				Name    string `json:"name"`
				FeatIds []int  `json:"featIds"`
			} `json:"grantedFeats"`
		} `json:"definition"`
		DefinitionID     interface{} `json:"definitionId"`
		CustomBackground struct {
			ID                                    int         `json:"id"`
			EntityTypeID                          int         `json:"entityTypeId"`
			Name                                  interface{} `json:"name"`
			Description                           interface{} `json:"description"`
			FeaturesBackground                    interface{} `json:"featuresBackground"`
			CharacteristicsBackground             interface{} `json:"characteristicsBackground"`
			FeaturesBackgroundDefinitionID        interface{} `json:"featuresBackgroundDefinitionId"`
			CharacteristicsBackgroundDefinitionID interface{} `json:"characteristicsBackgroundDefinitionId"`
			BackgroundType                        interface{} `json:"backgroundType"`
		} `json:"customBackground"`
	} `json:"background"`
	Race struct {
		IsSubRace         bool          `json:"isSubRace"`
		BaseRaceName      string        `json:"baseRaceName"`
		EntityRaceID      int           `json:"entityRaceId"`
		EntityRaceTypeID  int           `json:"entityRaceTypeId"`
		DefinitionKey     string        `json:"definitionKey"`
		FullName          string        `json:"fullName"`
		BaseRaceID        int           `json:"baseRaceId"`
		BaseRaceTypeID    int           `json:"baseRaceTypeId"`
		Description       string        `json:"description"`
		AvatarURL         string        `json:"avatarUrl"`
		LargeAvatarURL    string        `json:"largeAvatarUrl"`
		PortraitAvatarURL string        `json:"portraitAvatarUrl"`
		MoreDetailsURL    string        `json:"moreDetailsUrl"`
		IsHomebrew        bool          `json:"isHomebrew"`
		IsLegacy          bool          `json:"isLegacy"`
		GroupIds          []interface{} `json:"groupIds"`
		Type              int           `json:"type"`
		SupportsSubrace   interface{}   `json:"supportsSubrace"`
		SubRaceShortName  interface{}   `json:"subRaceShortName"`
		BaseName          string        `json:"baseName"`
		RacialTraits      []struct {
			Definition struct {
				ID               int           `json:"id"`
				DefinitionKey    string        `json:"definitionKey"`
				EntityTypeID     int           `json:"entityTypeId"`
				DisplayOrder     int           `json:"displayOrder"`
				Name             string        `json:"name"`
				Description      string        `json:"description"`
				Snippet          string        `json:"snippet"`
				HideInBuilder    bool          `json:"hideInBuilder"`
				HideInSheet      bool          `json:"hideInSheet"`
				Activation       interface{}   `json:"activation"`
				SourceID         int           `json:"sourceId"`
				SourcePageNumber int           `json:"sourcePageNumber"`
				CreatureRules    []interface{} `json:"creatureRules"`
				SpellListIds     []interface{} `json:"spellListIds"`
				FeatureType      int           `json:"featureType"`
				Sources          []struct {
					SourceID   int `json:"sourceId"`
					PageNumber int `json:"pageNumber"`
					SourceType int `json:"sourceType"`
				} `json:"sources"`
				AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys"`
				IsCalledOut                   bool          `json:"isCalledOut"`
				EntityType                    string        `json:"entityType"`
				EntityID                      string        `json:"entityID"`
				EntityRaceID                  int           `json:"entityRaceId"`
				EntityRaceTypeID              int           `json:"entityRaceTypeId"`
				DisplayConfiguration          struct {
					Racialtrait  int `json:"RACIALTRAIT"`
					Abilityscore int `json:"ABILITYSCORE"`
					Language     int `json:"LANGUAGE"`
					Classfeature int `json:"CLASSFEATURE"`
				} `json:"displayConfiguration"`
				RequiredLevel interface{}   `json:"requiredLevel"`
				Categories    []interface{} `json:"categories"`
			} `json:"definition"`
		} `json:"racialTraits"`
		WeightSpeeds struct {
			Normal struct {
				Walk   int `json:"walk"`
				Fly    int `json:"fly"`
				Burrow int `json:"burrow"`
				Swim   int `json:"swim"`
				Climb  int `json:"climb"`
			} `json:"normal"`
			Encumbered        interface{} `json:"encumbered"`
			HeavilyEncumbered interface{} `json:"heavilyEncumbered"`
			PushDragLift      interface{} `json:"pushDragLift"`
			Override          interface{} `json:"override"`
		} `json:"weightSpeeds"`
		FeatIds []interface{} `json:"featIds"`
		Size    interface{}   `json:"size"`
		SizeID  int           `json:"sizeId"`
		Sources []struct {
			SourceID   int `json:"sourceId"`
			PageNumber int `json:"pageNumber"`
			SourceType int `json:"sourceType"`
		} `json:"sources"`
	} `json:"race"`
	RaceDefinitionID     interface{} `json:"raceDefinitionId"`
	RaceDefinitionTypeID interface{} `json:"raceDefinitionTypeId"`
	Notes                struct {
		Allies              string `json:"allies"`
		PersonalPossessions string `json:"personalPossessions"`
		OtherHoldings       string `json:"otherHoldings"`
		Organizations       string `json:"organizations"`
		Enemies             string `json:"enemies"`
		Backstory           string `json:"backstory"`
		OtherNotes          string `json:"otherNotes"`
	} `json:"notes"`
	Traits struct {
		PersonalityTraits string `json:"personalityTraits"`
		Ideals            string `json:"ideals"`
		Bonds             string `json:"bonds"`
		Flaws             string `json:"flaws"`
		Appearance        string `json:"appearance"`
	} `json:"traits"`
	Preferences struct {
		UseHomebrewContent          bool `json:"useHomebrewContent"`
		ProgressionType             int  `json:"progressionType"`
		EncumbranceType             int  `json:"encumbranceType"`
		IgnoreCoinWeight            bool `json:"ignoreCoinWeight"`
		HitPointType                int  `json:"hitPointType"`
		ShowUnarmedStrike           bool `json:"showUnarmedStrike"`
		ShowScaledSpells            bool `json:"showScaledSpells"`
		PrimarySense                int  `json:"primarySense"`
		PrimaryMovement             int  `json:"primaryMovement"`
		PrivacyType                 int  `json:"privacyType"`
		SharingType                 int  `json:"sharingType"`
		AbilityScoreDisplayType     int  `json:"abilityScoreDisplayType"`
		EnforceFeatRules            bool `json:"enforceFeatRules"`
		EnforceMulticlassRules      bool `json:"enforceMulticlassRules"`
		EnableOptionalClassFeatures bool `json:"enableOptionalClassFeatures"`
		EnableOptionalOrigins       bool `json:"enableOptionalOrigins"`
		EnableDarkMode              bool `json:"enableDarkMode"`
		EnableContainerCurrency     bool `json:"enableContainerCurrency"`
	} `json:"preferences"`
	Configuration struct {
		StartingEquipmentType int  `json:"startingEquipmentType"`
		AbilityScoreType      int  `json:"abilityScoreType"`
		ShowHelpText          bool `json:"showHelpText"`
	} `json:"configuration"`
	Lifestyle interface{} `json:"lifestyle"`
	/*
		Inventory []struct {
			ID           int `json:"id"`
			EntityTypeID int `json:"entityTypeId"`
			Definition   struct {
				ID                    int           `json:"id"`
				BaseTypeID            int           `json:"baseTypeId"`
				EntityTypeID          int           `json:"entityTypeId"`
				DefinitionKey         string        `json:"definitionKey"`
				CanEquip              bool          `json:"canEquip"`
				Magic                 bool          `json:"magic"`
				Name                  string        `json:"name"`
				Snippet               interface{}   `json:"snippet"`
				Weight                int           `json:"weight"`
				WeightMultiplier      int           `json:"weightMultiplier"`
				Capacity              interface{}   `json:"capacity"`
				CapacityWeight        int           `json:"capacityWeight"`
				Type                  string        `json:"type"`
				Description           string        `json:"description"`
				CanAttune             bool          `json:"canAttune"`
				AttunementDescription interface{}   `json:"attunementDescription"`
				Rarity                string        `json:"rarity"`
				IsHomebrew            bool          `json:"isHomebrew"`
				Version               interface{}   `json:"version"`
				SourceID              interface{}   `json:"sourceId"`
				SourcePageNumber      interface{}   `json:"sourcePageNumber"`
				Stackable             bool          `json:"stackable"`
				BundleSize            int           `json:"bundleSize"`
				AvatarURL             interface{}   `json:"avatarUrl"`
				LargeAvatarURL        interface{}   `json:"largeAvatarUrl"`
				FilterType            string        `json:"filterType"`
				Cost                  int           `json:"cost"`
				IsPack                bool          `json:"isPack"`
				Tags                  []string      `json:"tags"`
				GrantedModifiers      []interface{} `json:"grantedModifiers"`
				SubType               interface{}   `json:"subType"`
				IsConsumable          bool          `json:"isConsumable"`
				WeaponBehaviors       []interface{} `json:"weaponBehaviors"`
				BaseItemID            int           `json:"baseItemId"`
				BaseArmorName         string        `json:"baseArmorName"`
				StrengthRequirement   interface{}   `json:"strengthRequirement"`
				ArmorClass            int           `json:"armorClass"`
				StealthCheck          int           `json:"stealthCheck"`
				Damage                interface{}   `json:"damage"`
				DamageType            interface{}   `json:"damageType"`
				FixedDamage           interface{}   `json:"fixedDamage"`
				Properties            interface{}   `json:"properties"`
				AttackType            interface{}   `json:"attackType"`
				CategoryID            interface{}   `json:"categoryId"`
				Range                 interface{}   `json:"range"`
				LongRange             interface{}   `json:"longRange"`
				IsMonkWeapon          bool          `json:"isMonkWeapon"`
				LevelInfusionGranted  interface{}   `json:"levelInfusionGranted"`
				Sources               []struct {
					SourceID   int         `json:"sourceId"`
					PageNumber interface{} `json:"pageNumber"`
					SourceType int         `json:"sourceType"`
				} `json:"sources"`
				ArmorTypeID           int         `json:"armorTypeId"`
				GearTypeID            interface{} `json:"gearTypeId"`
				GroupedID             interface{} `json:"groupedId"`
				CanBeAddedToInventory bool        `json:"canBeAddedToInventory"`
				IsContainer           bool        `json:"isContainer"`
				IsCustomItem          bool        `json:"isCustomItem"`
				IsLegacy              bool        `json:"isLegacy"`
			} `json:"definition"`
			DefinitionID           int         `json:"definitionId"`
			DefinitionTypeID       int         `json:"definitionTypeId"`
			DisplayAsAttack        interface{} `json:"displayAsAttack"`
			Quantity               int         `json:"quantity"`
			IsAttuned              bool        `json:"isAttuned"`
			Equipped               bool        `json:"equipped"`
			EquippedEntityTypeID   interface{} `json:"equippedEntityTypeId"`
			EquippedEntityID       interface{} `json:"equippedEntityId"`
			ChargesUsed            int         `json:"chargesUsed"`
			LimitedUse             interface{} `json:"limitedUse"`
			ContainerEntityID      int         `json:"containerEntityId"`
			ContainerEntityTypeID  int         `json:"containerEntityTypeId"`
			ContainerDefinitionKey string      `json:"containerDefinitionKey"`
			Currency               interface{} `json:"currency"`
		} `json:"inventory"`
	*/
	Currencies struct {
		Cp int `json:"cp"`
		Sp int `json:"sp"`
		Gp int `json:"gp"`
		Ep int `json:"ep"`
		Pp int `json:"pp"`
	} `json:"currencies"`
	Classes []struct {
		ID                   int         `json:"id"`
		EntityTypeID         int         `json:"entityTypeId"`
		Level                int         `json:"level"`
		IsStartingClass      bool        `json:"isStartingClass"`
		HitDiceUsed          int         `json:"hitDiceUsed"`
		DefinitionID         int         `json:"definitionId"`
		SubclassDefinitionID interface{} `json:"subclassDefinitionId"`
		Definition           struct {
			ID                    int         `json:"id"`
			DefinitionKey         string      `json:"definitionKey"`
			Name                  string      `json:"name"`
			Description           string      `json:"description"`
			EquipmentDescription  string      `json:"equipmentDescription"`
			ParentClassID         interface{} `json:"parentClassId"`
			AvatarURL             string      `json:"avatarUrl"`
			LargeAvatarURL        string      `json:"largeAvatarUrl"`
			PortraitAvatarURL     string      `json:"portraitAvatarUrl"`
			MoreDetailsURL        string      `json:"moreDetailsUrl"`
			SpellCastingAbilityID int         `json:"spellCastingAbilityId"`
			Sources               []struct {
				SourceID   int `json:"sourceId"`
				PageNumber int `json:"pageNumber"`
				SourceType int `json:"sourceType"`
			} `json:"sources"`
			ClassFeatures []struct {
				ID            int         `json:"id"`
				Name          string      `json:"name"`
				Prerequisite  interface{} `json:"prerequisite"`
				Description   string      `json:"description"`
				RequiredLevel int         `json:"requiredLevel"`
				DisplayOrder  int         `json:"displayOrder"`
			} `json:"classFeatures"`
			HitDice            int           `json:"hitDice"`
			WealthDice         interface{}   `json:"wealthDice"`
			CanCastSpells      bool          `json:"canCastSpells"`
			KnowsAllSpells     bool          `json:"knowsAllSpells"`
			SpellPrepareType   interface{}   `json:"spellPrepareType"`
			SpellContainerName interface{}   `json:"spellContainerName"`
			SourcePageNumber   int           `json:"sourcePageNumber"`
			SubclassDefinition interface{}   `json:"subclassDefinition"`
			IsHomebrew         bool          `json:"isHomebrew"`
			PrimaryAbilities   []interface{} `json:"primaryAbilities"`
			SpellRules         struct {
				MultiClassSpellSlotDivisor  int           `json:"multiClassSpellSlotDivisor"`
				IsRitualSpellCaster         bool          `json:"isRitualSpellCaster"`
				LevelCantripsKnownMaxes     []int         `json:"levelCantripsKnownMaxes"`
				LevelSpellKnownMaxes        []int         `json:"levelSpellKnownMaxes"`
				LevelSpellSlots             [][]int       `json:"levelSpellSlots"`
				MultiClassSpellSlotRounding int           `json:"multiClassSpellSlotRounding"`
				LevelPreparedSpellMaxes     []interface{} `json:"levelPreparedSpellMaxes"`
			} `json:"spellRules"`
			Prerequisites []struct {
				Description          string `json:"description"`
				PrerequisiteMappings []struct {
					ID                  int    `json:"id"`
					EntityID            int    `json:"entityId"`
					EntityTypeID        int    `json:"entityTypeId"`
					Type                string `json:"type"`
					SubType             string `json:"subType"`
					Value               int    `json:"value"`
					FriendlyTypeName    string `json:"friendlyTypeName"`
					FriendlySubTypeName string `json:"friendlySubTypeName"`
				} `json:"prerequisiteMappings"`
				HidePrerequisite bool `json:"hidePrerequisite"`
			} `json:"prerequisites"`
		} `json:"definition"`
		SubclassDefinition interface{} `json:"subclassDefinition"`
		ClassFeatures      []struct {
			Definition struct {
				ID                    int           `json:"id"`
				DefinitionKey         string        `json:"definitionKey"`
				EntityTypeID          int           `json:"entityTypeId"`
				DisplayOrder          int           `json:"displayOrder"`
				Name                  string        `json:"name"`
				Description           string        `json:"description"`
				Snippet               string        `json:"snippet"`
				Activation            interface{}   `json:"activation"`
				MultiClassDescription string        `json:"multiClassDescription"`
				RequiredLevel         int           `json:"requiredLevel"`
				IsSubClassFeature     bool          `json:"isSubClassFeature"`
				LimitedUse            []interface{} `json:"limitedUse"`
				HideInBuilder         bool          `json:"hideInBuilder"`
				HideInSheet           bool          `json:"hideInSheet"`
				SourceID              int           `json:"sourceId"`
				SourcePageNumber      int           `json:"sourcePageNumber"`
				CreatureRules         []interface{} `json:"creatureRules"`
				LevelScales           []interface{} `json:"levelScales"`
				InfusionRules         []interface{} `json:"infusionRules"`
				SpellListIds          []interface{} `json:"spellListIds"`
				ClassID               int           `json:"classId"`
				FeatureType           int           `json:"featureType"`
				Sources               []struct {
					SourceID   int `json:"sourceId"`
					PageNumber int `json:"pageNumber"`
					SourceType int `json:"sourceType"`
				} `json:"sources"`
				AffectedFeatureDefinitionKeys []interface{} `json:"affectedFeatureDefinitionKeys"`
				EntityType                    string        `json:"entityType"`
				EntityID                      string        `json:"entityID"`
				GrantedFeats                  []interface{} `json:"grantedFeats"`
			} `json:"definition"`
			LevelScale interface{} `json:"levelScale"`
		} `json:"classFeatures"`
	} `json:"classes"`
	Feats []struct {
		ComponentTypeID int `json:"componentTypeId"`
		ComponentID     int `json:"componentId"`
		Definition      struct {
			ID            int    `json:"id"`
			EntityTypeID  int    `json:"entityTypeId"`
			DefinitionKey string `json:"definitionKey"`
			Name          string `json:"name"`
			Description   string `json:"description"`
			Snippet       string `json:"snippet"`
			Activation    struct {
				ActivationTime interface{} `json:"activationTime"`
				ActivationType interface{} `json:"activationType"`
			} `json:"activation"`
			SourceID         interface{}   `json:"sourceId"`
			SourcePageNumber interface{}   `json:"sourcePageNumber"`
			CreatureRules    []interface{} `json:"creatureRules"`
			Prerequisites    []interface{} `json:"prerequisites"`
			IsHomebrew       bool          `json:"isHomebrew"`
			Sources          []struct {
				SourceID   int `json:"sourceId"`
				PageNumber int `json:"pageNumber"`
				SourceType int `json:"sourceType"`
			} `json:"sources"`
			SpellListIds       []interface{} `json:"spellListIds"`
			IsRepeatable       bool          `json:"isRepeatable"`
			RepeatableParentID interface{}   `json:"repeatableParentId"`
			Categories         []struct {
				ID            int    `json:"id"`
				EntityTypeID  int    `json:"entityTypeId"`
				EntityID      int    `json:"entityId"`
				DefinitionKey string `json:"definitionKey"`
				EntityTagID   int    `json:"entityTagId"`
				TagName       string `json:"tagName"`
			} `json:"categories"`
		} `json:"definition"`
		DefinitionID int `json:"definitionId"`
	} `json:"feats"`
	Features                 interface{}   `json:"features"`
	CustomDefenseAdjustments []interface{} `json:"customDefenseAdjustments"`
	CustomSenses             []interface{} `json:"customSenses"`
	CustomSpeeds             []interface{} `json:"customSpeeds"`
	CustomProficiencies      []interface{} `json:"customProficiencies"`
	CustomActions            []interface{} `json:"customActions"`
	CharacterValues          []interface{} `json:"characterValues"`
	Conditions               []interface{} `json:"conditions"`
	DeathSaves               struct {
		FailCount    interface{} `json:"failCount"`
		SuccessCount interface{} `json:"successCount"`
		IsStabilized bool        `json:"isStabilized"`
	} `json:"deathSaves"`
	AdjustmentXp interface{} `json:"adjustmentXp"`
	SpellSlots   []struct {
		Level     int `json:"level"`
		Used      int `json:"used"`
		Available int `json:"available"`
	} `json:"spellSlots"`
	PactMagic []struct {
		Level     int `json:"level"`
		Used      int `json:"used"`
		Available int `json:"available"`
	} `json:"pactMagic"`
	ActiveSourceCategories []int `json:"activeSourceCategories"`
	Spells                 struct {
		Race  []interface{} `json:"race"`
		Class []struct {
			OverrideSaveDc interface{} `json:"overrideSaveDc"`
			LimitedUse     interface{} `json:"limitedUse"`
			ID             int         `json:"id"`
			EntityTypeID   int         `json:"entityTypeId"`
			Definition     struct {
				ID            int    `json:"id"`
				DefinitionKey string `json:"definitionKey"`
				Name          string `json:"name"`
				Level         int    `json:"level"`
				School        string `json:"school"`
				Duration      struct {
					DurationInterval int    `json:"durationInterval"`
					DurationUnit     string `json:"durationUnit"`
					DurationType     string `json:"durationType"`
				} `json:"duration"`
				Activation struct {
					ActivationTime int `json:"activationTime"`
					ActivationType int `json:"activationType"`
				} `json:"activation"`
				Range struct {
					Origin     string      `json:"origin"`
					RangeValue int         `json:"rangeValue"`
					AoeType    interface{} `json:"aoeType"`
					AoeValue   interface{} `json:"aoeValue"`
				} `json:"range"`
				AsPartOfWeaponAttack  bool          `json:"asPartOfWeaponAttack"`
				Description           string        `json:"description"`
				Snippet               string        `json:"snippet"`
				Concentration         bool          `json:"concentration"`
				Ritual                bool          `json:"ritual"`
				RangeArea             interface{}   `json:"rangeArea"`
				DamageEffect          interface{}   `json:"damageEffect"`
				Components            []int         `json:"components"`
				ComponentsDescription string        `json:"componentsDescription"`
				SaveDcAbilityID       interface{}   `json:"saveDcAbilityId"`
				Healing               interface{}   `json:"healing"`
				HealingDice           []interface{} `json:"healingDice"`
				TempHpDice            []interface{} `json:"tempHpDice"`
				AttackType            interface{}   `json:"attackType"`
				CanCastAtHigherLevel  bool          `json:"canCastAtHigherLevel"`
				IsHomebrew            bool          `json:"isHomebrew"`
				Version               interface{}   `json:"version"`
				SourceID              interface{}   `json:"sourceId"`
				SourcePageNumber      int           `json:"sourcePageNumber"`
				RequiresSavingThrow   bool          `json:"requiresSavingThrow"`
				RequiresAttackRoll    bool          `json:"requiresAttackRoll"`
				AtHigherLevels        struct {
					HigherLevelDefinitions []struct {
						Level   interface{} `json:"level"`
						TypeID  int         `json:"typeId"`
						Dice    interface{} `json:"dice"`
						Value   int         `json:"value"`
						Details string      `json:"details"`
					} `json:"higherLevelDefinitions"`
					AdditionalAttacks []interface{} `json:"additionalAttacks"`
					AdditionalTargets []interface{} `json:"additionalTargets"`
					AreaOfEffect      []interface{} `json:"areaOfEffect"`
					Duration          []interface{} `json:"duration"`
					Creatures         []interface{} `json:"creatures"`
					Special           []interface{} `json:"special"`
					Points            []interface{} `json:"points"`
					Range             []interface{} `json:"range"`
				} `json:"atHigherLevels"`
				Modifiers []struct {
					FixedValue            interface{}   `json:"fixedValue"`
					ID                    string        `json:"id"`
					EntityID              interface{}   `json:"entityId"`
					EntityTypeID          interface{}   `json:"entityTypeId"`
					Type                  string        `json:"type"`
					SubType               string        `json:"subType"`
					Dice                  interface{}   `json:"dice"`
					Restriction           string        `json:"restriction"`
					StatID                interface{}   `json:"statId"`
					RequiresAttunement    bool          `json:"requiresAttunement"`
					Duration              interface{}   `json:"duration"`
					FriendlyTypeName      string        `json:"friendlyTypeName"`
					FriendlySubtypeName   string        `json:"friendlySubtypeName"`
					IsGranted             bool          `json:"isGranted"`
					BonusTypes            []interface{} `json:"bonusTypes"`
					Value                 interface{}   `json:"value"`
					AvailableToMulticlass interface{}   `json:"availableToMulticlass"`
					ModifierTypeID        int           `json:"modifierTypeId"`
					ModifierSubTypeID     int           `json:"modifierSubTypeId"`
					ComponentID           int           `json:"componentId"`
					ComponentTypeID       int           `json:"componentTypeId"`
					Die                   struct {
						DiceCount      int         `json:"diceCount"`
						DiceValue      int         `json:"diceValue"`
						DiceMultiplier interface{} `json:"diceMultiplier"`
						FixedValue     interface{} `json:"fixedValue"`
						DiceString     string      `json:"diceString"`
					} `json:"die"`
					Count          int         `json:"count"`
					DurationUnit   interface{} `json:"durationUnit"`
					UsePrimaryStat bool        `json:"usePrimaryStat"`
					AtHigherLevels struct {
						HigherLevelDefinitions []interface{} `json:"higherLevelDefinitions"`
						AdditionalAttacks      []interface{} `json:"additionalAttacks"`
						AdditionalTargets      []interface{} `json:"additionalTargets"`
						AreaOfEffect           []interface{} `json:"areaOfEffect"`
						Duration               []interface{} `json:"duration"`
						Creatures              []interface{} `json:"creatures"`
						Special                []interface{} `json:"special"`
						Points                 []interface{} `json:"points"`
						Range                  []interface{} `json:"range"`
					} `json:"atHigherLevels"`
				} `json:"modifiers"`
				Conditions             []interface{} `json:"conditions"`
				Tags                   []string      `json:"tags"`
				CastingTimeDescription string        `json:"castingTimeDescription"`
				ScaleType              string        `json:"scaleType"`
				Sources                []struct {
					SourceID   int `json:"sourceId"`
					PageNumber int `json:"pageNumber"`
					SourceType int `json:"sourceType"`
				} `json:"sources"`
				SpellGroups []interface{} `json:"spellGroups"`
				IsLegacy    bool          `json:"isLegacy"`
			} `json:"definition"`
			DefinitionID          int         `json:"definitionId"`
			Prepared              bool        `json:"prepared"`
			CountsAsKnownSpell    bool        `json:"countsAsKnownSpell"`
			UsesSpellSlot         bool        `json:"usesSpellSlot"`
			CastAtLevel           interface{} `json:"castAtLevel"`
			AlwaysPrepared        bool        `json:"alwaysPrepared"`
			Restriction           string      `json:"restriction"`
			SpellCastingAbilityID interface{} `json:"spellCastingAbilityId"`
			DisplayAsAttack       interface{} `json:"displayAsAttack"`
			AdditionalDescription string      `json:"additionalDescription"`
			CastOnlyAsRitual      bool        `json:"castOnlyAsRitual"`
			RitualCastingType     interface{} `json:"ritualCastingType"`
			Range                 struct {
				Origin     string      `json:"origin"`
				RangeValue int         `json:"rangeValue"`
				AoeType    interface{} `json:"aoeType"`
				AoeValue   interface{} `json:"aoeValue"`
			} `json:"range"`
			Activation struct {
				ActivationTime int `json:"activationTime"`
				ActivationType int `json:"activationType"`
			} `json:"activation"`
			BaseLevelAtWill       bool        `json:"baseLevelAtWill"`
			AtWillLimitedUseLevel interface{} `json:"atWillLimitedUseLevel"`
			IsSignatureSpell      interface{} `json:"isSignatureSpell"`
			ComponentID           int         `json:"componentId"`
			ComponentTypeID       int         `json:"componentTypeId"`
			SpellListID           interface{} `json:"spellListId"`
		} `json:"class"`
		Background interface{}   `json:"background"`
		Item       []interface{} `json:"item"`
		Feat       []interface{} `json:"feat"`
	} `json:"spells"`
	Options struct {
		Race       []interface{} `json:"race"`
		Class      []interface{} `json:"class"`
		Background interface{}   `json:"background"`
		Item       interface{}   `json:"item"`
		Feat       []interface{} `json:"feat"`
	} `json:"options"`
	Choices struct {
		Race []struct {
			ComponentID     int           `json:"componentId"`
			ComponentTypeID int           `json:"componentTypeId"`
			ID              string        `json:"id"`
			ParentChoiceID  interface{}   `json:"parentChoiceId"`
			Type            int           `json:"type"`
			SubType         interface{}   `json:"subType"`
			OptionValue     interface{}   `json:"optionValue"`
			Label           string        `json:"label"`
			IsOptional      bool          `json:"isOptional"`
			IsInfinite      bool          `json:"isInfinite"`
			DefaultSubtypes []interface{} `json:"defaultSubtypes"`
			DisplayOrder    int           `json:"displayOrder"`
			Options         []interface{} `json:"options"`
			OptionIds       []int         `json:"optionIds"`
			TagConstraints  []interface{} `json:"tagConstraints"`
		} `json:"race"`
		Class []struct {
			ComponentID     int           `json:"componentId"`
			ComponentTypeID int           `json:"componentTypeId"`
			ID              string        `json:"id"`
			ParentChoiceID  interface{}   `json:"parentChoiceId"`
			Type            int           `json:"type"`
			SubType         interface{}   `json:"subType"`
			OptionValue     interface{}   `json:"optionValue"`
			Label           interface{}   `json:"label"`
			IsOptional      bool          `json:"isOptional"`
			IsInfinite      bool          `json:"isInfinite"`
			DefaultSubtypes []interface{} `json:"defaultSubtypes"`
			DisplayOrder    interface{}   `json:"displayOrder"`
			Options         []interface{} `json:"options"`
			OptionIds       []interface{} `json:"optionIds"`
			TagConstraints  []interface{} `json:"tagConstraints"`
		} `json:"class"`
		Background []struct {
			ComponentID     int           `json:"componentId"`
			ComponentTypeID int           `json:"componentTypeId"`
			ID              string        `json:"id"`
			ParentChoiceID  interface{}   `json:"parentChoiceId"`
			Type            int           `json:"type"`
			SubType         int           `json:"subType"`
			OptionValue     int           `json:"optionValue"`
			Label           string        `json:"label"`
			IsOptional      bool          `json:"isOptional"`
			IsInfinite      bool          `json:"isInfinite"`
			DefaultSubtypes []string      `json:"defaultSubtypes"`
			DisplayOrder    interface{}   `json:"displayOrder"`
			Options         []interface{} `json:"options"`
			OptionIds       []int         `json:"optionIds"`
			TagConstraints  []interface{} `json:"tagConstraints"`
		} `json:"background"`
		Item interface{} `json:"item"`
		Feat []struct {
			ComponentID     int           `json:"componentId"`
			ComponentTypeID int           `json:"componentTypeId"`
			ID              string        `json:"id"`
			ParentChoiceID  interface{}   `json:"parentChoiceId"`
			Type            int           `json:"type"`
			SubType         interface{}   `json:"subType"`
			OptionValue     interface{}   `json:"optionValue"`
			Label           interface{}   `json:"label"`
			IsOptional      bool          `json:"isOptional"`
			IsInfinite      bool          `json:"isInfinite"`
			DefaultSubtypes []interface{} `json:"defaultSubtypes"`
			DisplayOrder    interface{}   `json:"displayOrder"`
			Options         []interface{} `json:"options"`
			OptionIds       []int         `json:"optionIds"`
			TagConstraints  []interface{} `json:"tagConstraints"`
		} `json:"feat"`
		ChoiceDefinitions []struct {
			ID      string `json:"id"`
			Options []struct {
				ID          int         `json:"id"`
				Label       string      `json:"label"`
				Description interface{} `json:"description"`
				SourceID    interface{} `json:"sourceId"`
			} `json:"options"`
		} `json:"choiceDefinitions"`
		DefinitionKeyNameMap struct {
			Feat1789189 string `json:"feat:1789189"`
			Feat1789122 string `json:"feat:1789122"`
			Feat1789213 string `json:"feat:1789213"`
		} `json:"definitionKeyNameMap"`
	} `json:"choices"`
	Actions struct {
		Race  []interface{} `json:"race"`
		Class []struct {
			ComponentID     int    `json:"componentId"`
			ComponentTypeID int    `json:"componentTypeId"`
			ID              string `json:"id"`
			EntityTypeID    string `json:"entityTypeId"`
			LimitedUse      struct {
				Name                     interface{} `json:"name"`
				StatModifierUsesID       interface{} `json:"statModifierUsesId"`
				ResetType                int         `json:"resetType"`
				NumberUsed               int         `json:"numberUsed"`
				MinNumberConsumed        int         `json:"minNumberConsumed"`
				MaxNumberConsumed        int         `json:"maxNumberConsumed"`
				MaxUses                  int         `json:"maxUses"`
				Operator                 int         `json:"operator"`
				UseProficiencyBonus      bool        `json:"useProficiencyBonus"`
				ProficiencyBonusOperator int         `json:"proficiencyBonusOperator"`
				ResetDice                interface{} `json:"resetDice"`
			} `json:"limitedUse"`
			Name                   string      `json:"name"`
			Description            string      `json:"description"`
			Snippet                string      `json:"snippet"`
			AbilityModifierStatID  interface{} `json:"abilityModifierStatId"`
			OnMissDescription      string      `json:"onMissDescription"`
			SaveFailDescription    string      `json:"saveFailDescription"`
			SaveSuccessDescription string      `json:"saveSuccessDescription"`
			SaveStatID             interface{} `json:"saveStatId"`
			FixedSaveDc            interface{} `json:"fixedSaveDc"`
			AttackTypeRange        interface{} `json:"attackTypeRange"`
			ActionType             int         `json:"actionType"`
			AttackSubtype          interface{} `json:"attackSubtype"`
			Dice                   struct {
				DiceCount      int         `json:"diceCount"`
				DiceValue      int         `json:"diceValue"`
				DiceMultiplier interface{} `json:"diceMultiplier"`
				FixedValue     interface{} `json:"fixedValue"`
				DiceString     string      `json:"diceString"`
			} `json:"dice"`
			Value           interface{} `json:"value"`
			DamageTypeID    int         `json:"damageTypeId"`
			IsMartialArts   bool        `json:"isMartialArts"`
			IsProficient    bool        `json:"isProficient"`
			SpellRangeType  interface{} `json:"spellRangeType"`
			DisplayAsAttack bool        `json:"displayAsAttack"`
			Range           struct {
				Range                    int         `json:"range"`
				LongRange                interface{} `json:"longRange"`
				AoeType                  interface{} `json:"aoeType"`
				AoeSize                  interface{} `json:"aoeSize"`
				HasAoeSpecialDescription bool        `json:"hasAoeSpecialDescription"`
				MinimumRange             interface{} `json:"minimumRange"`
			} `json:"range"`
			Activation struct {
				ActivationTime interface{} `json:"activationTime"`
				ActivationType int         `json:"activationType"`
			} `json:"activation"`
			NumberOfTargets interface{} `json:"numberOfTargets"`
			FixedToHit      interface{} `json:"fixedToHit"`
			Ammunition      interface{} `json:"ammunition"`
		} `json:"class"`
		Background interface{}   `json:"background"`
		Item       interface{}   `json:"item"`
		Feat       []interface{} `json:"feat"`
	} `json:"actions"`
	Modifiers struct {
		Race []struct {
			FixedValue            int           `json:"fixedValue"`
			ID                    string        `json:"id"`
			EntityID              int           `json:"entityId"`
			EntityTypeID          int           `json:"entityTypeId"`
			Type                  string        `json:"type"`
			SubType               string        `json:"subType"`
			Dice                  interface{}   `json:"dice"`
			Restriction           string        `json:"restriction"`
			StatID                interface{}   `json:"statId"`
			RequiresAttunement    bool          `json:"requiresAttunement"`
			Duration              interface{}   `json:"duration"`
			FriendlyTypeName      string        `json:"friendlyTypeName"`
			FriendlySubtypeName   string        `json:"friendlySubtypeName"`
			IsGranted             bool          `json:"isGranted"`
			BonusTypes            []interface{} `json:"bonusTypes"`
			Value                 int           `json:"value"`
			AvailableToMulticlass bool          `json:"availableToMulticlass"`
			ModifierTypeID        int           `json:"modifierTypeId"`
			ModifierSubTypeID     int           `json:"modifierSubTypeId"`
			ComponentID           int           `json:"componentId"`
			ComponentTypeID       int           `json:"componentTypeId"`
			TagConstraints        []interface{} `json:"tagConstraints"`
		} `json:"race"`
		Class []struct {
			FixedValue            interface{}   `json:"fixedValue"`
			ID                    string        `json:"id"`
			EntityID              interface{}   `json:"entityId"`
			EntityTypeID          interface{}   `json:"entityTypeId"`
			Type                  string        `json:"type"`
			SubType               string        `json:"subType"`
			Dice                  interface{}   `json:"dice"`
			Restriction           string        `json:"restriction"`
			StatID                interface{}   `json:"statId"`
			RequiresAttunement    bool          `json:"requiresAttunement"`
			Duration              interface{}   `json:"duration"`
			FriendlyTypeName      string        `json:"friendlyTypeName"`
			FriendlySubtypeName   string        `json:"friendlySubtypeName"`
			IsGranted             bool          `json:"isGranted"`
			BonusTypes            []interface{} `json:"bonusTypes"`
			Value                 interface{}   `json:"value"`
			AvailableToMulticlass bool          `json:"availableToMulticlass"`
			ModifierTypeID        int           `json:"modifierTypeId"`
			ModifierSubTypeID     int           `json:"modifierSubTypeId"`
			ComponentID           int           `json:"componentId"`
			ComponentTypeID       int           `json:"componentTypeId"`
			TagConstraints        []interface{} `json:"tagConstraints"`
		} `json:"class"`
		Background []struct {
			FixedValue            interface{}   `json:"fixedValue"`
			ID                    string        `json:"id"`
			EntityID              int           `json:"entityId"`
			EntityTypeID          int           `json:"entityTypeId"`
			Type                  string        `json:"type"`
			SubType               string        `json:"subType"`
			Dice                  interface{}   `json:"dice"`
			Restriction           string        `json:"restriction"`
			StatID                interface{}   `json:"statId"`
			RequiresAttunement    bool          `json:"requiresAttunement"`
			Duration              interface{}   `json:"duration"`
			FriendlyTypeName      string        `json:"friendlyTypeName"`
			FriendlySubtypeName   string        `json:"friendlySubtypeName"`
			IsGranted             bool          `json:"isGranted"`
			BonusTypes            []interface{} `json:"bonusTypes"`
			Value                 interface{}   `json:"value"`
			AvailableToMulticlass bool          `json:"availableToMulticlass"`
			ModifierTypeID        int           `json:"modifierTypeId"`
			ModifierSubTypeID     int           `json:"modifierSubTypeId"`
			ComponentID           int           `json:"componentId"`
			ComponentTypeID       int           `json:"componentTypeId"`
			TagConstraints        []interface{} `json:"tagConstraints"`
		} `json:"background"`
		Item []interface{} `json:"item"`
		Feat []struct {
			FixedValue            interface{}   `json:"fixedValue"`
			ID                    string        `json:"id"`
			EntityID              interface{}   `json:"entityId"`
			EntityTypeID          interface{}   `json:"entityTypeId"`
			Type                  string        `json:"type"`
			SubType               string        `json:"subType"`
			Dice                  interface{}   `json:"dice"`
			Restriction           string        `json:"restriction"`
			StatID                interface{}   `json:"statId"`
			RequiresAttunement    bool          `json:"requiresAttunement"`
			Duration              interface{}   `json:"duration"`
			FriendlyTypeName      string        `json:"friendlyTypeName"`
			FriendlySubtypeName   string        `json:"friendlySubtypeName"`
			IsGranted             bool          `json:"isGranted"`
			BonusTypes            []interface{} `json:"bonusTypes"`
			Value                 interface{}   `json:"value"`
			AvailableToMulticlass bool          `json:"availableToMulticlass"`
			ModifierTypeID        int           `json:"modifierTypeId"`
			ModifierSubTypeID     int           `json:"modifierSubTypeId"`
			ComponentID           int           `json:"componentId"`
			ComponentTypeID       int           `json:"componentTypeId"`
			TagConstraints        []interface{} `json:"tagConstraints"`
		} `json:"feat"`
		Condition []interface{} `json:"condition"`
	} `json:"modifiers"`
	ClassSpells []struct {
		EntityTypeID     int           `json:"entityTypeId"`
		CharacterClassID int           `json:"characterClassId"`
		Spells           []interface{} `json:"spells"`
	} `json:"classSpells"`
	CustomItems []interface{} `json:"customItems"`
	Campaign    struct {
		ID          int    `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
		Link        string `json:"link"`
		PublicNotes string `json:"publicNotes"`
		DmUserID    int    `json:"dmUserId"`
		DmUsername  string `json:"dmUsername"`
		Characters  []struct {
			UserID        int         `json:"userId"`
			Username      string      `json:"username"`
			CharacterID   int         `json:"characterId"`
			CharacterName string      `json:"characterName"`
			CharacterURL  string      `json:"characterUrl"`
			AvatarURL     string      `json:"avatarUrl"`
			PrivacyType   int         `json:"privacyType"`
			CampaignID    interface{} `json:"campaignId"`
			IsAssigned    bool        `json:"isAssigned"`
		} `json:"characters"`
	} `json:"campaign"`
	Creatures             []interface{} `json:"creatures"`
	OptionalOrigins       []interface{} `json:"optionalOrigins"`
	OptionalClassFeatures []interface{} `json:"optionalClassFeatures"`
	DateModified          time.Time     `json:"dateModified"`
	ProvidedFrom          string        `json:"providedFrom"`
	CanEdit               bool          `json:"canEdit"`
	Status                int           `json:"status"`
	StatusSlug            interface{}   `json:"statusSlug"`
	CampaignSetting       interface{}   `json:"campaignSetting"`
}
